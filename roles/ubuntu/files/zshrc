#! /bin/zsh
source ~/.antigen.zsh

antigen use oh-my-zsh

antigen theme MichaelAquilina/agnoster-zsh-theme agnoster

antigen bundle MichaelAquilina/zsh-syntax-highlighting
antigen bundle MichaelAquilina/zsh-completions

antigen bundle MichaelAquilina/zsh-history-substring-search

antigen bundle MichaelAquilina/zsh-autosuggestions

export AUTOSWITCH_DEFAULTENV="default3"
antigen bundle MichaelAquilina/zsh-autoswitch-virtualenv

antigen bundle history

antigen apply

plugins=()

# Infinite History
export HISTSIZE="999999999999999"
export HISTFILESIZE="-1"

setopt HIST_IGNORE_DUPS
setopt EXTENDED_HISTORY
setopt INC_APPEND_HISTORY_TIME

PREFERRED_HISTFILE="$HOME/Personal/zsh_history"
if [[ -f "$PREFERRED_HISTFILE" ]]; then
  export HISTFILE="$PREFERRED_HISTFILE"
fi

# show ISO8601 timestamp with history
alias history="fc -li 1"

VIRTUALENVWRAPPER="/usr/share/virtualenvwrapper/virtualenvwrapper.sh"
if [[ -f "$VIRTUALENVWRAPPER" ]]; then
  source "$VIRTUALENVWRAPPER"
  workon default3
fi

eval $(dircolors ~/.dircolors)

export shrug='¯\_(ツ)_/¯'
export fliptable='(╯°□°）╯︵ ┻━┻'
export angry='ლ(ಠ益ಠ)ლ'
export lennyface='( ͡° ͜ʖ ͡°)'

echo "Is the Internet on Fire? $fliptable"
host -W 1 -t txt istheinternetonfire.com | cut -f 2 -d '"' | cowsay -W 75 -f tux

# Disable ansible from using cowsay
export ANSIBLE_NOCOWS=1

# Source any additional configuration specific to this machine
if [[ -f ~/.machinerc.gpg ]]; then
  eval "$(gpg -d --no-tty ~/.machinerc.gpg 2>/dev/null)"
elif [[ -f ~/.machinerc ]]; then
  source ~/.machinerc
fi

if [[ -f ~/.github ]]; then
  export GITHUB_TOKEN="$(cat ~/.github)"
fi

# Allow ctrl+left and ctrl+right movement
bindkey ';5D' emacs-backward-word
bindkey ';5C' emacs-forward-word

export WORDCHARS=''

setopt extended_glob

export PAGER="most"
export EDITOR="vim"

# Use pushd instead of cd
setopt AUTO_PUSHD
setopt PUSHD_SILENT

alias H="history"
alias -g NE="2>/dev/null"

# Grep Aliases
alias g="grep"
alias ig="grep -i"

alias ll="ls -lh --group-directories-first"
alias l="ls -lah --group-directories-first"

# Git Aliases
alias gs="git status"
alias gc="git commit"
alias gca="git commit --amend"
alias gco="git checkout"
alias gap="git add -p"
alias gpl="git pull"
alias gr="git rebase"
alias gst="git stash"
alias gpum="git pull upstream master"
alias gd="git diff"

export GH="git@github.com:MichaelAquilina"
export BB="git@bitbucket.org:maquilina"

# Tig Aliases
alias ta="tig --all"
alias t="tig"

# Vagrant Aliases
alias vs="vagrant ssh"
alias vc="vagrant ssh -c"
alias vu="vagrant up"
alias vh="vagrant halt"
alias vp="vagrant provision"

# Docker Aliases
alias dcr="docker-compose run"

# Utilities
alias pm="pygmentize"
alias xopen="xdg-open"
alias LS="LS -e"  # Allow interrupt by Ctrl+C
alias explore="nautilus"
alias xcopy="xsel -i -b"
alias xpaste="xsel -o -b"
alias xc="xcopy"
alias xp="xpaste"


# Synchronise pass account
function psync() {
  pass git pull
  pass git push
}

alias plog='pass git log --pretty="format:%C(bold) %G? %C(cyan) %ci %C(bold yellow)%s"'

# Enable 256 color mode
export TERM="xterm-256color"

function whatismyip() {
  curl ifconfig.co -s --connect-timeout 1
}

# Recursively list all values in gsettings
function all_gsettings() {
  for schema in $(gsettings list-schemas)
  do
      gsettings list-recursively "$schema"
  done
}

function color_cheatsheet() {
   x=`tput op`
   y=`printf %$((${COLUMNS}-6))s`
   for i in {0..256}; do
     o=00$i
     echo -e ${o:${#o}-3:3} `tput setaf $i;tput setab $i`${y// /=}$x
   done
}

function s3sync() {
  if [[ -f ~/.s3sync ]]; then
    BUCKET="$(jq -r '.bucket' < ~/.s3sync)"

    IFS=$'\n'
    for directory in $(jq -r '.directories[]' < ~/.s3sync)
    do
      echo "Syncing '$directory'"
      if [[ ! -d "$directory" ]]; then
        mkdir "$directory"
      fi
      S3PATH="$BUCKET/$(basename $directory)"

      aws s3 sync --delete "$directory" "$S3PATH" $@
      aws s3 sync --delete "$S3PATH" "$directory" $@
   done
  else
    echo "~/.s3sync not found"
  fi
}

function clean_branches() {
  IFS=$'\n'
  for item in $(git branch --merged master | grep -v master)
  do
    git branch -d "${item:2}"
  done
}
